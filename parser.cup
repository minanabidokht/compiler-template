import java_cup.runtime.*;
import java.util.*;
import java.io.*;


init with{:
    table = new HashMap <String, HashMap <String, Double>>();
:};

parser code {:
    public HashMap <String, HashMap <String, Double>>table;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

    public Object stack(int position){
        return (((Symbol)stack.elementAt(tos + position)).value);
    }

:};

//HashMap<String, Integer> tab = new HashMap<String, Integer>();
 //     //  DEBUG: Print the stack content
    // for (int i = 0; i < 15; i++) {
    //     try {
    //         Object obj = parser.stack(-i);
    //         System.out.println("parser.stack(" + (-i) + ") = " + obj);
    //     } catch (Exception e) {
    //         break;
    //     }
    // };

/////////////////////////////
//// Symbols Delaration
////////////////////////////

terminal ;
// terminal String test;
// terminal Double test;
// terminal Integer test;

non terminal prog ;
// non terminal String ;
// non terminal HashMap ;
// non terminal Integer ;
// non terminal Double ;

// precedence left ;
// precedence left PLUS, DASH;
// precedence left STAR, SL;
// precedence left  OR_WD;
// precedence left AND_WD;
// precedence left NOT_WD;


//semantic action for saving in array in order
//{:  parser.table.put(mtname, matlist); 
//    Set<String> keys = matlist.keySet();
//    Float a = 0f;
//    Float b = 1000000f;
//    String less = "";
//    String more = "";
//    for(String key : keys){
//    if((Float)matlist.get(key) > a){
//        a = (Float)matlist.get(key);
//        more = key;
//    }
//    if((Float)matlist.get(key) < b){
//       b = (Float)matlist.get(key);
 //       less = key;
 //   }
//:}
System.out.println(mtname + ':' + " less: " + less + " more: " + more);
:}
/////////////////////////////
//// Grammar
////////////////////////////

start with prog;

prog ::= HEADER SEP SECTION1 SEP SECTION2
;

EXPR ::=    EXPR:x STAR EXPR:y {:RESULT = x * y;:}
        |   EXPR:x SL EXPR:y {:RESULT = x / y;:}
        |   EXPR:x DASH EXPR:y {:RESULT = x - y;:}
        |   EXPR:x PLUS EXPR:y {:RESULT = x + y;:}
        |   OP EXPR:x CP {:RESULT = x;:}
        |   REAL_NUM:x {:RESULT = x;:}
;