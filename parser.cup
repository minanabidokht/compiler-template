import java_cup.runtime.*;
import java.util.*;
import java.io.*;


init with{:
    table = new HashMap <String, HashMap <String, Double>>();
:};

parser code {:
    public HashMap <String, HashMap <String, Double>>table;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

    public Object stack(int position){
        return (((Symbol)stack.elementAt(tos + position)).value);
    }

:};

//semantic action: 
showing the result of Boolean in block action:
// if((Boolean)parser.stack(-5))
//  DEBUG: Print the stack content
//HashMap<String, Integer> tab = new HashMap<String, Integer>();
 
    // for (int i = 0; i < 15; i++) {
    //     try {
    //         Object obj = parser.stack(-i);
    //         System.out.println("parser.stack(" + (-i) + ") = " + obj);
    //     } catch (Exception e) {
    //         break;
    //     }
    // };
// BOOL_EXP ::=    BOOL_EXP:x AND_WD BOOL_EXP:y  {:RESULT = x && y;:}
//             |   BOOL_EXP:x OR_WD BOOL_EXP:y  {:RESULT = x||y;:}
//             |   NOT_WD BOOL_EXP:x {:RESULT = !x;:}
//             |   OP BOOL_EXP:x CP {:RESULT = x;:}
//             |   OBJECT_REF:x EQ_WD INUM:y {:
//             if(x.equals(y)){
//                 RESULT = true;
//             }else{
//                 RESULT = false;
//             };:}
//             |   OBJECT_REF:x NEQ_WD INUM:y {:
//             if(x.equals(y)){
//                 RESULT = false;
//             }else{
//                 RESULT = true;
//             };:}
// ;
// bool_expr ::= bool_expr:x AND bool_expr:y
//             {:
//                 RESULT = (x && y);
//             :}
//             | bool_expr:x OR bool_expr:y
//             {:
//                 RESULT = (x || y);
//             :}
//             | NOT bool_expr:x
//             {:
//                 RESULT = !x;
//             :}
//             | RO bool_expr:x RC
//             {:
//                 RESULT = x;
//             :}
//             | QSTRING:a DOT QSTRING:b EQEQ UINT:s
//             {:
//                 HashMap<String, Integer> tab = (HashMap)parser.table.get(a);
//                 Integer x = (Integer)tab.get(b);
//                 if(x.intValue() == s.intValue()) {
//                     RESULT = true;
//                 } else {
//                     RESULT = false;
//                 }
//             :}
// ;
// OBJECT_REF ::= QSTRING:x DOT QSTRING:y {:
//how to get all values here and use them in the next semantic action?
// HashMap<String, Integer> tab = parser.table.get(x);
// Integer value = tab.get(y);
// RESULT = value ;
// :}
// ;


/////////////////////////////
//// Symbols Delaration
////////////////////////////

terminal ;
// terminal String test;
// terminal Double test;
// terminal Integer test;

non terminal prog ;
// non terminal String ;
// non terminal HashMap ;
// non terminal Integer ;
// non terminal Double ;

// precedence left ;
// precedence left PLUS, DASH;
// precedence left STAR, SL;
// precedence left  OR_WD;
// precedence left AND_WD;
// precedence left NOT_WD;


//semantic action for saving in array in order
//{:  parser.table.put(mtname, matlist); 
//    Set<String> keys = matlist.keySet();
//    Float a = 0f;
//    Float b = 1000000f;
//    String less = "";
//    String more = "";
//    for(String key : keys){
//    if((Float)matlist.get(key) > a){
//        a = (Float)matlist.get(key);
//        more = key;
//    }
//    if((Float)matlist.get(key) < b){
//       b = (Float)matlist.get(key);
 //       less = key;
 //   }
//:}
// System.out.println(mtname + ':' + " less: " + less + " more: " + more);
// :}
//This function returns the maximum value between the listed <exp>
//exp2 ::= exp:ex {:RESULT = ex; :}
// | exp2:pex COMMA exp:ex {: if(ex > pex){ RESULT = ex; }else { RESULT = pex; } :}
// ;
/////////////////////////////
//// Grammar
////////////////////////////

start with prog;

prog ::= HEADER SEP SECTION1 SEP SECTION2
;

// EXPR ::= EXPR:a PLUS EXPR:b
//         {:
//             RESULT = a+b;
//         :} 
//         | EXPR:a STAR EXPR:b
//         {:
//             RESULT = a*b;
//         :}
//         | max:a
//         {:
//             RESULT = a;
//         :}
//         | REAL:a
//         {:
//             RESULT = a;
//         :}
//         | RO EXPR:a RC
//         {:
//             RESULT = a;
//         :}
// ;